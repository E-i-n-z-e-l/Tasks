package Theory.Basics;
/*
                                «Побитовые» операторы в языке Java

	Оператор 			Операция 			Пример 				Результат

	   & 				   И 				a & b 				1, если оба бита 1
	   | 				  ИЛИ 				a | b 				1, если хотя бы один бит 1
	   ^ 				Исключающее ИЛИ 	a ^ b 				1, если биты отличаются
	   ~				НЕ (отрицание) 		~a 				    Изменяет значение бита на противоположное
	  << 				Сдвиг влево 		n << p 				Сдвигает биты значения n на p позиций влево
	  >> 				Сдвиг вправо 		n >> p 				Сдвигает биты значения n на p позиций вправо
 */
public class Pobitovyye_operatory_v_yazyke_Java {
    public static void main(String[] args) {

        int fs = 53; // Двоичное представление 00110101

		/*
		Работаем с числом 53
		*/

        System.out.println("Флаг 1: "+(( (fs&1)>0) ? "ВКЛ" : "выкл"));

        System.out.println("Флаг 2: "+(( (fs&2)>0) ? "ВКЛ" : "выкл"));

        System.out.println("Флаг 3: "+(( (fs&4)>0) ? "ВКЛ" : "выкл"));

        System.out.println("Флаг 4: "+(( (fs&8)>0) ? "ВКЛ" : "выкл"));

        System.out.println("Флаг 5: "+(( (fs&16)>0)? "ВКЛ" : "выкл"));

        System.out.println("Флаг 6: "+(( (fs&32)>0)? "ВКЛ" : "выкл"));

        System.out.println("Флаг 7: "+(( (fs&64)>0)? "ВКЛ" : "выкл"));

        System.out.println("Флаг 8: "+(( (fs&128)>0)?"ВКЛ": "выкл"));

		/*
		Работаем с Числом 15
		*/

        int num = 15; // Двоичное представление 00001111

		/*
		& - Если первая цифра в двоичном числе равна 1, то ставит "ВКЛ",
 если 0, то "выкл". И так можно проверить все 8 цифр в двоичном числе.
		*/

        System.out.println(((num & 128) > 0)?"ВКЛ": "выкл");

		/*
		| - Если есть хотя бы одна цифра 1 в двоичном числе, то ставит "ВКЛ"
		*/

        System.out.println(((num | 128) > 0)?"ВКЛ": "выкл");

		/*
		^ - если два двоичных числа имеют одинаковые биты, то ставит "выкл",
 если биты отличаются, ставит "ВКЛ".
		*/

        System.out.println(((num ^ 15) > 0)?"ВКЛ": "выкл");

		/*
		<< - сдвигает биты (0 и 1) влево, тем самым меняя число. Например было
 число 15, сдвиг на 1 бит влево получается число 30,
		сдвиг на 2 биты
 влево, получаем число 60, на 3 бита будет уже число 120.
 Таким образом увеличиваем каждое следующее число
		в два раза каждым битом.
		*/

        System.out.println(num << 3);

// __________________________________НОВОЕ ЧИСЛО______________________________________

		/*
		>> - сдвигает биты (0 и 1) вправо, тем самым меняя число.
 Таким образом уменьшает каждое следующее число в два раза каждым битом.
		*/

        int numSecond = 1500; // В двоичной системе это - 10111011100

        System.out.println(numSecond >> 1);
    }
}
