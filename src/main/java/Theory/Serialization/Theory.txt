                                                Сериализация в Java

Сериализация в Java - это процесс преобразования объекта в последовательность байтов (или другой формат данных,
такой как JSON), чтобы его можно было сохранить в файле, передать по сети или использовать для хранения в базе
данных. Сериализация позволяет сохранять состояние объекта и восстановить его в том же состоянии позднее.

Основные преимущества сериализации в Java:

1. Сохранение состояния объекта: Сериализация позволяет сохранить состояние объекта во внешнем или постоянном
хранилище, таком как файл или база данных. Это позволяет вам сохранить объекты или передавать их между различными
компьютерами или процессами.

2. Передача объектов по сети: Сериализация позволяет передавать объекты между клиентским и серверным приложениями
по сети. Объекты могут быть сериализованы в последовательность байтов и переданы через сетевое соединение, а затем
десериализованы обратно в объекты приемной стороны.

3. Хранение объектов в базе данных: Сериализация позволяет сохранять объекты в базе данных в структуре данных,
такой как BLOB (Binary Large Object). Это может быть полезно, если вы хотите сохранить объекты, имеющие сложную
иерархию или содержащие нестандартные типы данных.

В Java сериализация осуществляется с помощью интерфейса Serializable. Класс, реализующий этот интерфейс,
должен указать, что он может быть сериализован. Когда объект сериализуется, он и все объекты в его графе
достижимости должны быть сериализуемыми.

Пример класса, реализующего сериализацию:

import java.io.Serializable;

public class Person implements Serializable {
    private String name;
    private int age;

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Геттеры и сеттеры

    @Override
    public String toString() {
        return "Person{" +
                "name='" + name + '\'' +
                ", age=" + age +
                '}';
    }
}

В этом примере класс Person реализует интерфейс Serializable.

Для сериализации объекта Person в файл или передачи по сети, вы можете использовать классы
ObjectOutputStream и FileOutputStream. Например:

Person person = new Person("John", 25);

try (FileOutputStream fileOutputStream = new FileOutputStream("person.ser");
     ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {

    objectOutputStream.writeObject(person);

} catch (IOException ex) {
    ex.printStackTrace();
}

Этот код сериализует объект Person в файл с именем "person.ser"
с использованием потоков FileOutputStream и ObjectOutputStream.

Для десериализации объекта Person обратно в объект из файла или сети, используйте классы ObjectInputStream и
FileInputStream. Например:

try (FileInputStream fileInputStream = new FileInputStream("person.ser");
     ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {

    Person deserializedPerson = (Person) objectInputStream.readObject();
    System.out.println(deserializedPerson);

} catch (IOException | ClassNotFoundException ex) {
    ex.printStackTrace();
}

В этом коде мы десериализуем объект Person из файла с помощью потоков FileInputStream и ObjectInputStream.
Затем мы выводим десериализованного человека на экран.