Stream API в Java предоставляет возможность более удобной и эффективной обработки данных коллекций и других объектов.
Он представляет собой новый инструмент для работы с последовательностями (streams) объектов в функциональном стиле.

Основными преимуществами Stream API являются:

1. Позволяет выполнять операции над коллекциями с использованием функционального программирования.
2. Упрощает и улучшает читаемость кода.
3. Позволяет легко включать параллельные операции для увеличения производительности.

Stream API состоит из двух видов операций: промежуточные операции (intermediate operations)
и терминальные операции (terminal operations).

Промежуточные операции применяются к исходному потоку и создают новый модифицированный поток.
Некоторые примеры промежуточных операций включают filter(), map(), distinct(), sorted() и т.д.
Они предназначены для манипулирования и фильтрации данных.

Терминальные операции выполняются после всех промежуточных операций и производят окончательные результаты.
Некоторые примеры терминальных операций включают forEach(), collect(), reduce(), count() и т.д.
Они приводят к окончательным результатам, таким как вычисление суммы или подсчет количества элементов.

Пример использования Stream API:

List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

int sum = numbers.stream()
                .filter(n -> n % 2 == 0)
                .mapToInt(n -> n * 2)
                .sum();

System.out.println(sum); // Вывод: 60

В данном примере мы создаем поток из списка чисел, фильтруем только четные числа, умножаем их
на 2 и суммируем результат.