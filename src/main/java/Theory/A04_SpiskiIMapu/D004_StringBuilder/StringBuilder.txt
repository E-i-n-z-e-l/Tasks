В Java StringBuilder представляет собой класс, который используется для создания и изменения строк без создания
новых объектов String. Он предоставляет гибкую и эффективную работу с изменяемыми строками.

### Для чего он нужен?
StringBuilder полезен, когда необходимо создавать или изменять строки в процессе выполнения программы.
Поскольку строки в Java являются неизменяемыми (immutable), при каждом изменении строки создается новый
объект, что может потреблять большое количество памяти. StringBuilder позволяет изменять один и тот же
объект строки без создания новых экземпляров, что делает его эффективным в ситуациях, где требуется
множественные манипуляции со строками.

### Основные методы
Вот несколько из основных методов, которые часто используются при работе с StringBuilder:

1. append(String str) - добавляет строку str в конец StringBuilder.
2. insert(int offset, String str) - вставляет строку str по указанному offset.
3. delete(int start, int end) - удаляет подстроку между указанными индексами start и end.
4. toString() - возвращает содержимое StringBuilder в виде обычной строки типа String.

### Примеры использования
Давай посмотрим на примеры, чтобы понять, как использовать StringBuilder:

public class StringBuilderExample {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();

        sb.append("Hello, ");
        sb.append("world");
        sb.append("!");

        System.out.println(sb.toString()); // Вывод: Hello, world!

        sb.insert(7, "awesome ");
        System.out.println(sb.toString()); // Вывод: Hello, awesome world!

        sb.delete(7, 15);
        System.out.println(sb.toString()); // Вывод: Hello, world!
    }
}


В этом примере мы создали StringBuilder, добавили несколько строк, вставили слово между "Hello" и "world" и
затем удалили вставленное слово.

Так что, вот как StringBuilder облегчает манипуляции со строками, позволяя изменять их содержимое без создания
большого количества временных объектов строк.














