                                StringBuilder. Теория.

В Java StringBuilder представляет собой класс, который используется для создания и изменения строк без создания
новых объектов String. Он предоставляет гибкую и эффективную работу с изменяемыми строками.

### Для чего он нужен?
StringBuilder полезен, когда необходимо создавать или изменять строки в процессе выполнения программы.
Поскольку строки в Java являются неизменяемыми (immutable), при каждом изменении строки создается новый
объект, что может потреблять большое количество памяти. StringBuilder позволяет изменять один и тот же
объект строки без создания новых экземпляров, что делает его эффективным в ситуациях, где требуется
множественные манипуляции со строками.

### Основные методы
Вот несколько из основных методов, которые часто используются при работе с StringBuilder:

1. append(String str) - добавляет строку str в конец StringBuilder.
2. insert(int offset, String str) - вставляет строку str по указанному offset.
3. delete(int start, int end) - удаляет подстроку между указанными индексами start и end.
4. toString() - возвращает содержимое StringBuilder в виде обычной строки типа String.

### Примеры использования
Давай посмотрим на примеры, чтобы понять, как использовать StringBuilder:

public class StringBuilderExample {
    public static void main(String[] args) {
        StringBuilder sb = new StringBuilder();

        sb.append("Hello, ");
        sb.append("world");
        sb.append("!");

        System.out.println(sb.toString()); // Вывод: Hello, world!

        sb.insert(7, "awesome ");
        System.out.println(sb.toString()); // Вывод: Hello, awesome world!

        sb.delete(7, 15);
        System.out.println(sb.toString()); // Вывод: Hello, world!
    }
}


В этом примере мы создали StringBuilder, добавили несколько строк, вставили слово между "Hello" и "world" и
затем удалили вставленное слово.

Так что, вот как StringBuilder облегчает манипуляции со строками, позволяя изменять их содержимое без создания
большого количества временных объектов строк.

--------------------------------------------------------------------------------------------------------------------
В Java существует несколько способов прохода по объекту StringBuilder помимо использования цикла
с индексацией (цикл for). Давай рассмотрим их:

### 1. Цикл for-each с использованием метода codePoints()
В Java 9 появился метод codePoints(), который позволяет проходить по символам в строке или StringBuilder без
необходимости преобразования строки в массив символов. Это особенно полезно, когда имеются символы Unicode или
суррогатные пары.

StringBuilder sb = new StringBuilder("Привет, мир!");

sb.codePoints().forEach(codePoint -> System.out.print(Character.toChars(codePoint)));
// Результат: Привет, мир!


### 2. Цикл for со счетчиком и метод length()
Также можно использовать стандартный цикл for, но с методом codePointAt(), который позволяет читать символы
в кодировке UTF-16:

StringBuilder sb = new StringBuilder("Hello, 世界!");

for (int i = 0; i < sb.length(); ) {
    int code = sb.codePointAt(i);
    i += Character.charCount(code);
    System.out.print(Character.toChars(code));
}
// Результат: Hello, 世界!


### 3. Использование метода chars()
Java 8 предоставляет метод chars(), который возвращает поток IntStream, содержащий значения кодовых точек символов
в строке или StringBuilder:

StringBuilder sb = new StringBuilder("Java StringBuilder");

sb.chars().forEach(codePoint -> System.out.print(Character.toChars(codePoint)));
// Результат: Java StringBuilder


### 4. Метод toString()
Наконец, если необходимо модифицировать StringBuilder и преобразовать его обратно в строку для дальнейшей обработки,
можно использовать метод toString():

StringBuilder sb = new StringBuilder("Java StringBuilder");

String str = sb.toString();
System.out.println(str);
// Результат: Java StringBuilder

Это лишь несколько из множества способов прохода по StringBuilder в Java. Каждый из этих способов имеет свои
особенности и может быть использован в зависимости от конкретной задачи.

________________________________________________________________________________________________________________
Получение последнего символа или последних нескольких символов из StringBuilder можно выполнить несколькими способами.
Вот несколько из них:

### 1. Использование метода charAt()
StringBuilder sb = new StringBuilder("Hello, World!");

// Получение последнего символа
char lastChar = sb.charAt(sb.length() - 1);
System.out.println("Последний символ: " + lastChar);
// Результат: Последний символ: !

// Для получения нескольких последних символов:
int count = 3;
StringBuilder lastChars = new StringBuilder();
for (int i = Math.max(0, sb.length() - count); i < sb.length(); i++) {
    lastChars.append(sb.charAt(i));
}
System.out.println("Последние " + count + " символа: " + lastChars.toString());
// Результат: Последние 3 символа: d!


### 2. Использование метода substring()
StringBuilder sb = new StringBuilder("Hello, World!");

// Получение последнего символа
String lastChar = sb.substring(sb.length() - 1);
System.out.println("Последний символ: " + lastChar);
// Результат: Последний символ: !

// Для получения нескольких последних символов:
int count = 3;
String lastChars = sb.substring(Math.max(0, sb.length() - count));
System.out.println("Последние " + count + " символа: " + lastChars);
// Результат: Последние 3 символа: ld!

_________________________________________________________________________________________________________________
Метод substring() в Java используется для извлечения подстроки из строки или объекта StringBuilder.
Он позволяет получить часть исходной строки, начиная с определенного индекса и до определенного индекса
(включительно либо исключительно).

### Синтаксис метода substring():

String substring(int beginIndex)
String substring(int beginIndex, int endIndex)

- beginIndex: Индекс символа, с которого начинается подстрока. Для StringBuilder индексация начинается с 0.
- endIndex: Индекс символа, до которого будет идти подстрока. Символ с индексом endIndex не включается в подстроку. Если endIndex не указан, подстрока будет включать все символы с beginIndex до конца строки.

### Пример использования метода substring():
StringBuilder sb = new StringBuilder("Hello, World!");

String sub1 = sb.substring(7);
System.out.println(sub1);
// Вывод: "World!"

String sub2 = sb.substring(0, 5);
System.out.println(sub2);
// Вывод: "Hello"

В первом примере sb.substring(7) получает подстроку, начиная с индекса 7 (включительно) и до конца строки.
Во втором примере sb.substring(0, 5) возвращает подстроку, начиная с индекса 0 (включительно) и до индекса 5
(исключительно).

Метод substring() может быть полезен для множества задач, таких как извлечение части строки для дальнейшей
обработки, обрезание строки и т.д.

_________________________________________________________________________________________________________________

Чтобы перевернуть StringBuilder в Java, можно воспользоваться методом reverse().
Этот метод переворачивает содержимое StringBuilder так, чтобы последний символ становился первым,
второй с предпоследним, и так далее.

Пример:

StringBuilder sb = new StringBuilder("Hello, World!");
sb.reverse();
System.out.println(sb.toString());
// Вывод: !dlroW ,olleH


Вызов sb.reverse() изменяет содержимое StringBuilder таким образом, что символы разворачиваются в обратном порядке.

____________________________________________________________________________________________________________________

Для замены символов или подстрок на другие символы или подстроки в объекте StringBuilder в Java можно воспользоваться
методом replace().

### Синтаксис метода replace():

StringBuilder replace(int start, int end, String str)

- start: Индекс, с которого начинается подстрока для замены.
- end: Индекс, до которого идёт подстрока для замены (исключительно).
- str: Строка, которой будет заменена указанная подстрока.

### Пример замены подстроки в StringBuilder:

StringBuilder sb = new StringBuilder("Hello, world!");

sb.replace(7, 12, "Java");
System.out.println(sb.toString());
// Вывод: Hello, Java!

В этом примере метод replace() заменяет подстроку, начиная с индекса 7 (включительно) и до индекса 12 (исключительно),
на строку "Java", заменяя "world" на "Java".

### Замена одного символа на другой:

StringBuilder sb = new StringBuilder("abcd");

sb.setCharAt(1, 'Z');
System.out.println(sb.toString());
// Вывод: aZcd

В этом примере метод setCharAt() устанавливает символ в индексе 1 равным 'Z', заменяя "b" на "Z".
Как видите, replace() и setCharAt() предоставляют удобные способы замены содержимого в объекте StringBuilder.

_________________________________________________________________________________________________________________

Метод compareTo() в StringBuilder сравнивает содержимое двух объектов StringBuilder.
Он возвращает отрицательное целое число, ноль или положительное целое число, если вызывающий объект (перед точкой)
меньше, равен или больше объекта, переданного в аргументе соответственно.

### Синтаксис метода compareTo() в StringBuilder:
public int compareTo(StringBuilder another)

### Пример использования метода compareTo():

StringBuilder sb1 = new StringBuilder("abc");
StringBuilder sb2 = new StringBuilder("def");

int result1 = sb1.compareTo(sb2);
System.out.println(result1);  // Вывод: отрицательное число (меньше)

StringBuilder sb3 = new StringBuilder("abc");
StringBuilder sb4 = new StringBuilder("abc");

int result2 = sb3.compareTo(sb4);
System.out.println(result2);  // Вывод: 0 (равно)

StringBuilder sb5 = new StringBuilder("xyz");
StringBuilder sb6 = new StringBuilder("abc");

int result3 = sb5.compareTo(sb6);
System.out.println(result3);  // Вывод: положительное число (больше)

В этом примере compareTo() сравнивает содержимое StringBuilder. result1 отрицательный, так как "abc" (sb1) меньше
чем "def" (sb2). result2 равен 0, так как "abc" (sb3) равно "abc" (sb4). И result3 положительный, так как "xyz" (sb5)
больше чем "abc" (sb6).

Когда вызывается метод compareTo(), он сравнивает символы в StringBuilder по их последовательному расположению.
Если он находит различие, он возвращает разницу в числовой форме (в соответствии с лексикографическим порядком
кодовых точек) между первыми парой отличающихся символов. Если содержимое одинаковое, он возвращает 0.

Этот метод полезен при сравнении содержимого StringBuilder для целей сортировки или определения их относительного
порядка.



