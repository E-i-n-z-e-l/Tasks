                                        Метод split()

Метод split() из класса String позволяет разбить исходную строку на подстроки, используя указанный разделитель, и
возвращает массив строк, содержащий полученные подстроки.

### Синтаксис метода split():
String[] split(String regex)

- regex: Регулярное выражение, по которому будет производиться разделение строки.

### Пример использования метода split():
String sentence = "Hello, world! This is a sample text.";
String[] words = sentence.split("\\s+");

for (String word : words) {
    System.out.println(word);
}


### Регулярные выражения и использование \\s+:
В данном примере \\s+ - это регулярное выражение, которое используется для разделения строки на слова.

- \\s: Этот шаблон представляет любой пробельный символ в строке, такой как пробел, табуляция, перевод строки и
другие аналогичные символы.

- +: Этот символ, следующий сразу после \\s, говорит методу split(), что он должен разделять строку по одному или
более вхождению пробельного символа. Таким образом, \\s+ разделяет строку на слова по любому количеству пробельных
символов (один или более).

Таким образом, вызов split("\\s+") нашего примера разобьет строку на слова, разделяя их по пробельным символам,
и возвращает массив из этих слов.

Рассмотрим еще несколько шаблонов, которые можно использовать с методом split().

### 1. Разделение по запятой:
String values = "apple,banana,grape,orange";
String[] fruits = values.split(",");
// fruits = {"apple", "banana", "grape", "orange"}

Здесь запятая (,) используется в качестве разделителя для разбиения строки на подстроки.

### 2. Разделение по целому числу пробелов:
String text = "Это    строка    с    разным  количеством  пробелов";
String[] words = text.split("\\s+");
// words = {"Это", "строка", "с", "разным", "количеством", "пробелов"}

Здесь \\s+ используется для разбиения строки на слова, независимо от количества пробелов между словами.

### 3. Разделение по точке с запятой:
String data = "Иван;Петров;30;Москва;Россия";
String[] info = data.split(";");
// info = {"Иван", "Петров", "30", "Москва", "Россия"}

В этом примере точка с запятой (;) используется в качестве разделителя для извлечения отдельных значений.

### 4. Разделение по символу перевода строки:
String multilineText = "Первая строка\nВторая строка\nТретья строка";
String[] lines = multilineText.split("\n");
// lines = {"Первая строка", "Вторая строка", "Третья строка"}

Здесь символ перевода строки (\n) используется для разбиения многострочного текста на отдельные строки.

### 5. Разделение по регулярному выражению:
String complexText = "one__two__three";
String[] parts = complexText.split("__");
// parts = {"one", "two", "three"}

В этом примере __ используется в качестве разделителя для разбиения строки на подстроки.