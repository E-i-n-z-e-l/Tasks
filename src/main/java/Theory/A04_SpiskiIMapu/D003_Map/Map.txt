Map в Java представляет собой интерфейс, который отображает ключи на значения. Map не может содержать
дублирующиеся ключи; каждый ключ может быть связан только с одним значением.

Основные методы Map:

1. put(K key, V value) - Добавляет указанное значение value с ключом key в Map. Если ключ уже присутствует в Map,
значение будет заменено.
Пример:
Map<String, Integer> map = new HashMap<>();
map.put("One", 1);
map.put("Two", 2);
map.put("Three", 3);

2. get(Object key) - Возвращает значение, связанное с указанным ключом, или null, если ключ отсутствует в Map.
Пример:
Integer value = map.get("Two");
System.out.println(value); // Выведет: 2

3. containsKey(Object key) - Возвращает true, если Map содержит указанный ключ.
Пример:
boolean containsKey = map.containsKey("Three");
System.out.println(containsKey); // Выведет: true

4. remove(Object key) - Удаляет значение, связанное с указанным ключом, из Map.
Пример:
map.remove("Two");

Пример работы с Map:

import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        System.out.println(map.get("Two")); // Выведет: 2
        System.out.println(map.containsKey("Three")); // Выведет: true

        map.remove("Two");
        System.out.println(map.containsKey("Two")); // Выведет: false
    }
}

HashMap в Java — это основная реализация интерфейса Map. Он представляет собой структуру данных,
использующую хэш-таблицу для хранения пар ключ-значение. HashMap позволяет хранить нулевые ключи и
нулевые значения и обеспечивает среднюю сложность для основных операций, таких как добавление, поиск и
удаление элементов.

Преимущества использования HashMap:

- Основные операции (добавление, поиск, удаление) выполняются за константное время в среднем.
- Позволяет хранить нулевые ключи и нулевые значения.
- Предоставляет эффективный поиск по ключу.

Особенности:

- Не гарантирует порядок элементов.
- Для обеспечения эффективной работы требует правильного выбора начальной емкости и коэффициента загрузки.

Таким образом, HashMap представляет собой удобную и эффективную структуру данных для хранения пар ключ-значение в Java.

























