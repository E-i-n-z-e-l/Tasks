Map в Java представляет собой интерфейс, который отображает ключи на значения. Map не может содержать
дублирующиеся ключи; каждый ключ может быть связан только с одним значением.

Основные методы Map:

1. put(K key, V value) - Добавляет указанное значение value с ключом key в Map. Если ключ уже присутствует в Map,
значение будет заменено.
Пример:
Map<String, Integer> map = new HashMap<>();
map.put("One", 1);
map.put("Two", 2);
map.put("Three", 3);

2. get(Object key) - Возвращает значение, связанное с указанным ключом, или null, если ключ отсутствует в Map.
Пример:
Integer value = map.get("Two");
System.out.println(value); // Выведет: 2

3. containsKey(Object key) - Возвращает true, если Map содержит указанный ключ.
Пример:
boolean containsKey = map.containsKey("Three");
System.out.println(containsKey); // Выведет: true

4. remove(Object key) - Удаляет значение, связанное с указанным ключом, из Map.
Пример:
map.remove("Two");

5. isEmpty() - для проверки того, есть ли в нашей HashMap хотя бы один элемент.
Пример:
public static void main(String[] args) {
   HashMap<Integer, String> passportsAndNames = new HashMap<>();
   passportsAndNames.put(212133, "Лидия Аркадьевна Бубликова");
   passportsAndNames.put(162348, "Иван Михайлович Серебряков");
   passportsAndNames.put(8082771, "Дональд Джон Трамп");

   if (!passportsAndNames.isEmpty()) {

       System.out.println(passportsAndNames);

   }
}

6. putAll() - объединение двух Map. Мы вызываем его у первой HashMap, передаем вторую в качестве аргумента,
и элементы из второй будут добавлены в первую
Пример:
passportsAndNames.putAll(passportsAndNames2);

Пример работы с Map:

import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);
        map.put("Three", 3);

        System.out.println(map.get("Two")); // Выведет: 2
        System.out.println(map.containsKey("Three")); // Выведет: true

        map.remove("Two");
        System.out.println(map.containsKey("Two")); // Выведет: false
    }
}

HashMap в Java — это основная реализация интерфейса Map. Он представляет собой структуру данных,
использующую хэш-таблицу для хранения пар ключ-значение. HashMap позволяет хранить нулевые ключи и
нулевые значения и обеспечивает среднюю сложность для основных операций, таких как добавление, поиск и
удаление элементов.

Преимущества использования HashMap:

- Основные операции (добавление, поиск, удаление) выполняются за константное время в среднем.
- Позволяет хранить нулевые ключи и нулевые значения.
- Предоставляет эффективный поиск по ключу.

Особенности:

- Не гарантирует порядок элементов.
- Для обеспечения эффективной работы требует правильного выбора начальной емкости и коэффициента загрузки.

Таким образом, HashMap представляет собой удобную и эффективную структуру данных для хранения пар ключ-значение в Java.

                                        Перебор HashMap в цикле.

for (Map.Entry entry: passportsAndNames.entrySet()) {

   System.out.println(entry);

}

Интерфейс Map.Entry обозначает как раз пару “ключ-значение” внутри словаря.

Метод entrySet() возвращает список всех пар в нашей HashMap (поскольку наша мапа состоит как раз из таких пар-Entry,
то мы перебираем именно пары, а не отдельно ключи или значения).

                                                    Map.Entry

Интерфейс Map.Entry в Java представляет собой внутренний интерфейс, который используется для представления
элементов пар ключ-значение в объектах, реализующих интерфейс Map (например, HashMap, TreeMap, LinkedHashMap).
Каждая запись (entry) в Map представляет собой пару, состоящую из ключа и соответствующего ему значения.

Основные методы интерфейса Map.Entry:

1. getKey()
   - Получает ключ, связанный с данной записью.

2. getValue()
   - Получает значение, связанное с данным ключом.

3. setValue(V value)
   - Заменяет значение, связанное с данной записью, на указанное значение.
Пример использования интерфейса Map.Entry:

import java.util.Map;
import java.util.HashMap;

public class MapEntryExample {
    public static void main(String[] args) {
        Map<String, Integer> map = new HashMap<>();
        map.put("One", 1);
        map.put("Two", 2);

        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
        }
    }
}


Интерфейс Map.Entry полезен при работе с коллекциями Map, поскольку он предоставляет способы доступа к ключу и
значению для каждой записи. Кроме того, он позволяет обрабатывать каждую запись независимо и выполнять операции с
ключами и значениями внутри циклов и других структур данных.


Дополнительная статья - https://habr.com/ru/articles/128017/
Дополнительная статья - https://javarush.com/groups/posts/2542-otvetih-na-samihe-populjarnihe-voprosih-ob-interfeyse-map






















